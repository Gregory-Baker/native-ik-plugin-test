//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace IK {

public class TRAC_IK : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TRAC_IK(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TRAC_IK obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TRAC_IK() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          trac_ik_wrapPINVOKE.delete_TRAC_IK(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool getKDLChain(SWIGTYPE_p_KDL__Chain chain_) {
    bool ret = trac_ik_wrapPINVOKE.TRAC_IK_getKDLChain(swigCPtr, SWIGTYPE_p_KDL__Chain.getCPtr(chain_));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getKDLLimits(SWIGTYPE_p_KDL__JntArray lb_, SWIGTYPE_p_KDL__JntArray ub_) {
    bool ret = trac_ik_wrapPINVOKE.TRAC_IK_getKDLLimits(swigCPtr, SWIGTYPE_p_KDL__JntArray.getCPtr(lb_), SWIGTYPE_p_KDL__JntArray.getCPtr(ub_));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getSolutions(SWIGTYPE_p_std__vectorT_KDL__JntArray_t solutions_) {
    bool ret = trac_ik_wrapPINVOKE.TRAC_IK_getSolutions__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_KDL__JntArray_t.getCPtr(solutions_));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getSolutions(SWIGTYPE_p_std__vectorT_KDL__JntArray_t solutions_, SWIGTYPE_p_std__vectorT_std__pairT_double_uint_t_t errors_) {
    bool ret = trac_ik_wrapPINVOKE.TRAC_IK_getSolutions__SWIG_1(swigCPtr, SWIGTYPE_p_std__vectorT_KDL__JntArray_t.getCPtr(solutions_), SWIGTYPE_p_std__vectorT_std__pairT_double_uint_t_t.getCPtr(errors_));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool setKDLLimits(SWIGTYPE_p_KDL__JntArray lb_, SWIGTYPE_p_KDL__JntArray ub_) {
    bool ret = trac_ik_wrapPINVOKE.TRAC_IK_setKDLLimits__SWIG_0(swigCPtr, SWIGTYPE_p_KDL__JntArray.getCPtr(lb_), SWIGTYPE_p_KDL__JntArray.getCPtr(ub_));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double JointErr(SWIGTYPE_p_KDL__JntArray arr1, SWIGTYPE_p_KDL__JntArray arr2) {
    double ret = trac_ik_wrapPINVOKE.TRAC_IK_JointErr(SWIGTYPE_p_KDL__JntArray.getCPtr(arr1), SWIGTYPE_p_KDL__JntArray.getCPtr(arr2));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CartToJnt(SWIGTYPE_p_KDL__JntArray q_init, SWIGTYPE_p_KDL__Frame p_in, SWIGTYPE_p_KDL__JntArray q_out, SWIGTYPE_p_KDL__Twist bounds) {
    int ret = trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_0(swigCPtr, SWIGTYPE_p_KDL__JntArray.getCPtr(q_init), SWIGTYPE_p_KDL__Frame.getCPtr(p_in), SWIGTYPE_p_KDL__JntArray.getCPtr(q_out), SWIGTYPE_p_KDL__Twist.getCPtr(bounds));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CartToJnt(SWIGTYPE_p_KDL__JntArray q_init, SWIGTYPE_p_KDL__Frame p_in, SWIGTYPE_p_KDL__JntArray q_out) {
    int ret = trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_1(swigCPtr, SWIGTYPE_p_KDL__JntArray.getCPtr(q_init), SWIGTYPE_p_KDL__Frame.getCPtr(p_in), SWIGTYPE_p_KDL__JntArray.getCPtr(q_out));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolveType(SolveType _type) {
    trac_ik_wrapPINVOKE.TRAC_IK_SetSolveType(swigCPtr, (int)_type);
  }

  public TRAC_IK(string base_link, string tip_link, string urdf_string, double timeout, double epsilon, string solve_type) : this(trac_ik_wrapPINVOKE.new_TRAC_IK(base_link, tip_link, urdf_string, timeout, epsilon, solve_type), true) {
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw, double boundx, double boundy, double boundz, double boundrx, double boundry, double boundrz) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_2(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw, boundx, boundy, boundz, boundrx, boundry, boundrz), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw, double boundx, double boundy, double boundz, double boundrx, double boundry) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_3(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw, boundx, boundy, boundz, boundrx, boundry), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw, double boundx, double boundy, double boundz, double boundrx) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_4(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw, boundx, boundy, boundz, boundrx), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw, double boundx, double boundy, double boundz) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_5(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw, boundx, boundy, boundz), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw, double boundx, double boundy) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_6(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw, boundx, boundy), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw, double boundx) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_7(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw, boundx), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector CartToJnt(DoubleVector q_init, double x, double y, double z, double rx, double ry, double rz, double rw) {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_CartToJnt__SWIG_8(swigCPtr, DoubleVector.getCPtr(q_init), x, y, z, rx, ry, rz, rw), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNrOfJointsInChain() {
    int ret = trac_ik_wrapPINVOKE.TRAC_IK_getNrOfJointsInChain(swigCPtr);
    return ret;
  }

  public StringVector getJointNamesInChain(string urdf_string) {
    StringVector ret = new StringVector(trac_ik_wrapPINVOKE.TRAC_IK_getJointNamesInChain(swigCPtr, urdf_string), true);
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringVector getLinkNamesInChain() {
    StringVector ret = new StringVector(trac_ik_wrapPINVOKE.TRAC_IK_getLinkNamesInChain(swigCPtr), true);
    return ret;
  }

  public DoubleVector getLowerBoundLimits() {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_getLowerBoundLimits(swigCPtr), true);
    return ret;
  }

  public DoubleVector getUpperBoundLimits() {
    DoubleVector ret = new DoubleVector(trac_ik_wrapPINVOKE.TRAC_IK_getUpperBoundLimits(swigCPtr), true);
    return ret;
  }

  public void setKDLLimits(DoubleVector lb, DoubleVector ub) {
    trac_ik_wrapPINVOKE.TRAC_IK_setKDLLimits__SWIG_1(swigCPtr, DoubleVector.getCPtr(lb), DoubleVector.getCPtr(ub));
    if (trac_ik_wrapPINVOKE.SWIGPendingException.Pending) throw trac_ik_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
