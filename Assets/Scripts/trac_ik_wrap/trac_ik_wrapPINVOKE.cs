//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace IK {

class trac_ik_wrapPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="SWIGRegisterExceptionCallbacks_trac_ik_wrap")]
    public static extern void SWIGRegisterExceptionCallbacks_trac_ik_wrap(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_trac_ik_wrap")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_trac_ik_wrap(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_trac_ik_wrap(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_trac_ik_wrap(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="SWIGRegisterStringCallback_trac_ik_wrap")]
    public static extern void SWIGRegisterStringCallback_trac_ik_wrap(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_trac_ik_wrap(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static trac_ik_wrapPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Clear")]
  public static extern void IntVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Add")]
  public static extern void IntVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_size")]
  public static extern uint IntVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_capacity")]
  public static extern uint IntVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_reserve")]
  public static extern void IntVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_IntVector__SWIG_0")]
  public static extern global::System.IntPtr new_IntVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_IntVector__SWIG_1")]
  public static extern global::System.IntPtr new_IntVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_IntVector__SWIG_2")]
  public static extern global::System.IntPtr new_IntVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_getitemcopy")]
  public static extern int IntVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_getitem")]
  public static extern int IntVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_setitem")]
  public static extern void IntVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_AddRange")]
  public static extern void IntVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_GetRange")]
  public static extern global::System.IntPtr IntVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Insert")]
  public static extern void IntVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_InsertRange")]
  public static extern void IntVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_RemoveAt")]
  public static extern void IntVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_RemoveRange")]
  public static extern void IntVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Repeat")]
  public static extern global::System.IntPtr IntVector_Repeat(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Reverse__SWIG_0")]
  public static extern void IntVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Reverse__SWIG_1")]
  public static extern void IntVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_SetRange")]
  public static extern void IntVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Contains")]
  public static extern bool IntVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_IndexOf")]
  public static extern int IntVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_LastIndexOf")]
  public static extern int IntVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_IntVector_Remove")]
  public static extern bool IntVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_delete_IntVector")]
  public static extern void delete_IntVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Clear")]
  public static extern void DoubleVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Add")]
  public static extern void DoubleVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_size")]
  public static extern uint DoubleVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_capacity")]
  public static extern uint DoubleVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_reserve")]
  public static extern void DoubleVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_DoubleVector__SWIG_0")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_DoubleVector__SWIG_1")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_DoubleVector__SWIG_2")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_getitemcopy")]
  public static extern double DoubleVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_getitem")]
  public static extern double DoubleVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_setitem")]
  public static extern void DoubleVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_AddRange")]
  public static extern void DoubleVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_GetRange")]
  public static extern global::System.IntPtr DoubleVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Insert")]
  public static extern void DoubleVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_InsertRange")]
  public static extern void DoubleVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_RemoveAt")]
  public static extern void DoubleVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_RemoveRange")]
  public static extern void DoubleVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Repeat")]
  public static extern global::System.IntPtr DoubleVector_Repeat(double jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Reverse__SWIG_0")]
  public static extern void DoubleVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Reverse__SWIG_1")]
  public static extern void DoubleVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_SetRange")]
  public static extern void DoubleVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Contains")]
  public static extern bool DoubleVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_IndexOf")]
  public static extern int DoubleVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_LastIndexOf")]
  public static extern int DoubleVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_DoubleVector_Remove")]
  public static extern bool DoubleVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_delete_DoubleVector")]
  public static extern void delete_DoubleVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Clear")]
  public static extern void StringVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Add")]
  public static extern void StringVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_size")]
  public static extern uint StringVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_capacity")]
  public static extern uint StringVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_reserve")]
  public static extern void StringVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_StringVector__SWIG_0")]
  public static extern global::System.IntPtr new_StringVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_StringVector__SWIG_1")]
  public static extern global::System.IntPtr new_StringVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_StringVector__SWIG_2")]
  public static extern global::System.IntPtr new_StringVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_getitemcopy")]
  public static extern string StringVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_getitem")]
  public static extern string StringVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_setitem")]
  public static extern void StringVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_AddRange")]
  public static extern void StringVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_GetRange")]
  public static extern global::System.IntPtr StringVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Insert")]
  public static extern void StringVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_InsertRange")]
  public static extern void StringVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_RemoveAt")]
  public static extern void StringVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_RemoveRange")]
  public static extern void StringVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Repeat")]
  public static extern global::System.IntPtr StringVector_Repeat(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Reverse__SWIG_0")]
  public static extern void StringVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Reverse__SWIG_1")]
  public static extern void StringVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_SetRange")]
  public static extern void StringVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Contains")]
  public static extern bool StringVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_IndexOf")]
  public static extern int StringVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_LastIndexOf")]
  public static extern int StringVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_StringVector_Remove")]
  public static extern bool StringVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_delete_StringVector")]
  public static extern void delete_StringVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Clear")]
  public static extern void ConstCharVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Add")]
  public static extern void ConstCharVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_size")]
  public static extern uint ConstCharVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_capacity")]
  public static extern uint ConstCharVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_reserve")]
  public static extern void ConstCharVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_ConstCharVector__SWIG_0")]
  public static extern global::System.IntPtr new_ConstCharVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_ConstCharVector__SWIG_1")]
  public static extern global::System.IntPtr new_ConstCharVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_ConstCharVector__SWIG_2")]
  public static extern global::System.IntPtr new_ConstCharVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_getitemcopy")]
  public static extern string ConstCharVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_getitem")]
  public static extern string ConstCharVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_setitem")]
  public static extern void ConstCharVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_AddRange")]
  public static extern void ConstCharVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_GetRange")]
  public static extern global::System.IntPtr ConstCharVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Insert")]
  public static extern void ConstCharVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_InsertRange")]
  public static extern void ConstCharVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_RemoveAt")]
  public static extern void ConstCharVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_RemoveRange")]
  public static extern void ConstCharVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Repeat")]
  public static extern global::System.IntPtr ConstCharVector_Repeat(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Reverse__SWIG_0")]
  public static extern void ConstCharVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Reverse__SWIG_1")]
  public static extern void ConstCharVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_SetRange")]
  public static extern void ConstCharVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Contains")]
  public static extern bool ConstCharVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_IndexOf")]
  public static extern int ConstCharVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_LastIndexOf")]
  public static extern int ConstCharVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_ConstCharVector_Remove")]
  public static extern bool ConstCharVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_delete_ConstCharVector")]
  public static extern void delete_ConstCharVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_delete_TRAC_IK")]
  public static extern void delete_TRAC_IK(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getKDLChain")]
  public static extern bool TRAC_IK_getKDLChain(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getKDLLimits")]
  public static extern bool TRAC_IK_getKDLLimits(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getSolutions__SWIG_0")]
  public static extern bool TRAC_IK_getSolutions__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getSolutions__SWIG_1")]
  public static extern bool TRAC_IK_getSolutions__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_setKDLLimits__SWIG_0")]
  public static extern bool TRAC_IK_setKDLLimits__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_JointErr")]
  public static extern double TRAC_IK_JointErr(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_0")]
  public static extern int TRAC_IK_CartToJnt__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_1")]
  public static extern int TRAC_IK_CartToJnt__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_SetSolveType")]
  public static extern void TRAC_IK_SetSolveType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_new_TRAC_IK")]
  public static extern global::System.IntPtr new_TRAC_IK(string jarg1, string jarg2, string jarg3, double jarg4, double jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_2")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14, double jarg15);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_3")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13, double jarg14);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_4")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12, double jarg13);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_5")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11, double jarg12);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_6")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10, double jarg11);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_7")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9, double jarg10);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_CartToJnt__SWIG_8")]
  public static extern global::System.IntPtr TRAC_IK_CartToJnt__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8, double jarg9);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getNrOfJointsInChain")]
  public static extern int TRAC_IK_getNrOfJointsInChain(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getJointNamesInChain")]
  public static extern global::System.IntPtr TRAC_IK_getJointNamesInChain(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getLinkNamesInChain")]
  public static extern global::System.IntPtr TRAC_IK_getLinkNamesInChain(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getLowerBoundLimits")]
  public static extern global::System.IntPtr TRAC_IK_getLowerBoundLimits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_getUpperBoundLimits")]
  public static extern global::System.IntPtr TRAC_IK_getUpperBoundLimits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("trac_ik_wrap", EntryPoint="CSharp_IK_TRAC_IK_setKDLLimits__SWIG_1")]
  public static extern void TRAC_IK_setKDLLimits__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);
}

}
